<!DOCTYPE html>
<html lang="fr">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Gestion des Projets</title>

    <!-- Lien vers Bootstrap CSS -->
    <link href="https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/css/bootstrap.min.css" rel="stylesheet">

    <!-- Lien vers votre feuille de style CSS -->
    <link rel="stylesheet" href="/css/style.css">
    <style>
    /* Boutons avec effet de transition */
.btn-outline-warning, .btn-outline-danger, .btn-outline-primary, .btn-outline-info, .btn-outline-secondary, .btn-outline-success {
    border-radius: 5px;
    transition: all 0.3s ease;
}

/* Effet au survol */
.btn-outline-warning:hover, .btn-outline-danger:hover, .btn-outline-primary:hover, .btn-outline-info:hover, .btn-outline-secondary:hover, .btn-outline-success:hover {
    background-color: #f8f9fa;
    transform: scale(1.05);
    box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
}

/* Icônes Bootstrap avec un peu d'espace */
.btn i {
    margin-right: 8px;
}

    </style>
</head>

<body>
    {% include 'header.twig' %} <!-- Inclure l'en-tête -->

    <main class="container mt-5">
        <h2>Bienvenue, {{ projet.utilisateur.nom }} !</h2>
        <p class="lead">Profitez de votre gestion de projets !</p>

        {% if projets is empty %}
            <a href="#creerProjet" class="btn btn-primary btn-lg mt-3" data-toggle="modal">Créer votre premier projet</a>
        {% else %}
            <a href="#creerProjet" class="btn btn-primary btn-lg mt-3" data-toggle="modal">Créer un nouveau projet</a>
            <a href="/projets" class="btn btn-primary btn-lg mt-3">Voir mes projets</a>
        {% endif %}
        
        <h1>Liste des Projets</h1>

<div class="row">
    {% for projet in projets %}
        <div class="col-md-4 mb-4">
            <div class="card shadow-sm border-light">
                <div class="card-body">
                    <h5 class="card-title">{{ projet.nom }}</h5>
                    <p class="card-text">{{ projet.description }}</p>
                    <p><strong>Début :</strong> {{ projet.date_debut | date('d/m/Y') }} - <strong>Fin :</strong> {{ projet.date_fin | date('d/m/Y') }}</p>
                    <div class="d-flex justify-content-between">
                        <!-- Boutons de modification et de suppression sur la même ligne -->
                        <div class="btn-group" role="group">
                            <button class="btn btn-outline-warning btn-sm mr-2 btnEditProject" data-projet-id="{{ projet.id }}">
                                <i class="bi bi-pencil"></i> Modifier
                            </button>
                            <button class="btn btn-outline-danger btn-sm btnDeleteProject" data-id="{{ projet.id }}" data-nom="{{ projet.nom }}">
                                <i class="bi bi-trash"></i> Supprimer
                            </button>
                            <button class="btn btn-success" data-projet-id="{{ projet.id }}" id="btnAjouterMembre">
                                 Ajouter des membres
                            </button> 
                       
                        </div>
                    </div>
                    <!-- Select placé sur une nouvelle ligne -->
                    <div class="mt-2">
                        <select class="form-select" data-id="{{ projet.id }}" data-nom="{{ projet.nom }}">
                            <option value="" disabled selected>Choisir une action</option>
                            <option value="tasks">
                                <i class="bi bi-check-square"></i> Voir les tâches
                            </option>
                            <option value="milestones">
                                <i class="bi bi-calendar-check"></i> Voir les jalons
                            </option>
                            <option value="report">
                                <i class="bi bi-file-earmark-text"></i> Voir le rapport d'avancement
                            </option>
                            <option value="chat">
                                <i class="bi bi-chat"></i> Accéder au Chat
                            </option>
                            
                        </select>
                    </div>
                </div>
            </div>
        </div>
    {% endfor %}
</div>



        <!-- Modal de création de projet -->
        <div class="modal fade" id="creerProjet" tabindex="-1" role="dialog" aria-labelledby="creerProjetLabel" aria-hidden="true">
            <div class="modal-dialog" role="document">
                <div class="modal-content">
                    <div class="modal-header">
                        <h5 class="modal-title" id="creerProjetLabel">Créer un nouveau projet</h5>
                        <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                            <span aria-hidden="true">&times;</span>
                        </button>
                    </div>
                    <form id="projectForm">
                        <div class="modal-body">
                            <div class="form-group">
                                <label for="nom">Nom du projet</label>
                                <input type="text" class="form-control" id="nom" name="nom" required>
                            </div>
                            <div class="form-group">
                                <label for="description">Description</label>
                                <textarea class="form-control" id="description" name="description" required></textarea>
                            </div>
                            <div class="form-group">
                                <label for="date_debut">Date de début</label>
                                <input type="date" class="form-control" id="date_debut" name="date_debut" required>
                            </div>
                            <div class="form-group">
                                <label for="date_fin">Date de fin</label>
                                <input type="date" class="form-control" id="date_fin" name="date_fin" required>
                            </div>
                        </div>
                        <div class="modal-footer">
                            <button type="button" class="btn btn-secondary" data-dismiss="modal">Annuler</button>
                            <button type="submit" class="btn btn-primary">Créer le projet</button>
                        </div>
                    </form>
                </div>
            </div>
        </div>

        <!-- Modal pour modifier un projet -->
        <div class="modal fade" id="editProjet" tabindex="-1" role="dialog" aria-labelledby="editProjetLabel" aria-hidden="true">
            <div class="modal-dialog" role="document">
                <div class="modal-content">
                    <div class="modal-header">
                        <h5 class="modal-title" id="editProjetLabel">Modifier le projet</h5>
                        <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                            <span aria-hidden="true">&times;</span>
                        </button>
                    </div>
                    <form id="editProjectForm">
                        <div class="modal-body">
                            <div class="form-group">
                                <input type="hidden" id="editProjectId" name="id">
                            </div>
                            <div class="form-group">
                                <label for="editNom">Nom du projet</label>
                                <input type="text" class="form-control" id="editNom" name="nom" required>
                            </div>
                            <div class="form-group">
                                <label for="editDescription">Description</label>
                                <textarea class="form-control" id="editDescription" name="description" required></textarea>
                            </div>
                            <div class="form-group">
                                <label for="editDate_debut">Date de début</label>
                                <input type="date" class="form-control" id="editDate_debut" name="date_debut" required>
                            </div>
                            <div class="form-group">
                                <label for="editDate_fin">Date de fin</label>
                                <input type="date" class="form-control" id="editDate_fin" name="date_fin" required>
                            </div>
                        </div>
                        <div class="modal-footer">
                            <button type="button" class="btn btn-secondary" data-dismiss="modal">Annuler</button>
                            <button type="submit" class="btn btn-primary">Modifier le projet</button>
                        </div>
                    </form>
                </div>
            </div>
        </div>











<!-- Modal pour modifier un projet -->
<div class="modal fade" id="editProjet" tabindex="-1" role="dialog" aria-labelledby="editProjetLabel" aria-hidden="true">
    <div class="modal-dialog" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="editProjetLabel">Modifier le projet</h5>
                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <form id="editProjectForm">
                <div class="modal-body">
                    <div class="form-group">
                        <input type="hidden" id="editProjectId" name="id">
                    </div>
                    <div class="form-group">
                        <label for="editNom">Nom du projet</label>
                        <input type="text" class="form-control" id="editNom" name="nom" required>
                    </div>
                    <div class="form-group">
                        <label for="editDescription">Description</label>
                        <textarea class="form-control" id="editDescription" name="description" required></textarea>
                    </div>
                    <div class="form-group">
                        <label for="editDate_debut">Date de début</label>
                        <input type="date" class="form-control" id="editDate_debut" name="date_debut" required>
                    </div>
                    <div class="form-group">
                        <label for="editDate_fin">Date de fin</label>
                        <input type="date" class="form-control" id="editDate_fin" name="date_fin" required>
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-dismiss="modal">Annuler</button>
                    <button type="submit" class="btn btn-primary">Modifier le projet</button>
                </div>
            </form>
        </div>
    </div>
</div>















<div class="modal fade" id="ajouterMembreModal" tabindex="-1" role="dialog" aria-labelledby="ajouterMembreModalLabel" aria-hidden="true">
    <div class="modal-dialog" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="ajouterMembreModalLabel">Inviter un membre au projet</h5>
                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <div class="modal-body">
                <form id="ajouterMembreForm">
                    <div class="mb-3">
                        <label for="memberEmail" class="form-label">Email du membre</label>
                        <input type="email" class="form-control" id="memberEmail" name="memberEmail" required>
                    </div>
                    <input type="hidden" id="hiddenProjetId" name="projetId">
                    <button type="submit" class="btn btn-primary">Envoyer l'invitation</button>
                </form>
            </div>
        </div>
    </div>
</div>









    </main>

    <script src="https://code.jquery.com/jquery-3.5.1.min.js"></script>
    {# <script src="https://cdn.jsdelivr.net/npm/@popperjs/core@1.16.1/dist/umd/popper.min.js"></script> #}
    <script src="https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/js/bootstrap.min.js"></script>
   
<script src="https://code.jquery.com/jquery-3.5.1.slim.min.js"></script>
<script src="https://cdn.jsdelivr.net/npm/@popperjs/core@2.0.7/dist/umd/popper.min.js"></script>
<script src="https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/js/bootstrap.min.js"></script>



    <script>





document.addEventListener('DOMContentLoaded', () => {
    // Sélectionner tous les éléments select avec des options d'action
    const actionSelectors = document.querySelectorAll('.form-select');

    actionSelectors.forEach(select => {
        select.addEventListener('change', async function () {
            const selectedAction = this.value;
            const projectId = this.dataset.id;
            const projectName = this.dataset.nom;

            // Vérifier l'action sélectionnée
            if (selectedAction === 'tasks') {
                // Redirection vers les tâches
                window.location.href = `/taches/${projectId}`;
            } else if (selectedAction === 'milestones') {
                // Redirection vers les jalons
                window.location.href = `/api/jalons/${projectId}`;
            } else if (selectedAction === 'report') {
                // Redirection vers le rapport d'avancement
                window.location.href = `/api/rapports/rapport/${projectId}`;
            } else if (selectedAction === 'chat') {
                // Redirection vers le chat
                window.location.href = `/chat/${projectId}`;
            } 

            // Réinitialiser le select pour éviter que l'action ne soit déclenchée à nouveau
            this.value = ''; // Réinitialise le select après l'action
        });
    });
});

















// Fonction pour gérer le clic sur le bouton Modifier
document.querySelectorAll(".btnEditProject").forEach(button => {
    button.addEventListener("click", function () {
        const projectId = this.getAttribute("data-projet-id");

        // Récupérer les informations du projet depuis l'API
        fetch(`/api/projets/projet/${projectId}`)
    .then(response => {
        if (!response.ok) {
            throw new Error(`Erreur HTTP: ${response.status}`);
        }
        return response.json();
    })
    .then(data => {
        document.getElementById('editProjectId').value = data.id;
        document.getElementById('editNom').value = data.nom;
        document.getElementById('editDescription').value = data.description;
        // Conversion des dates en format YYYY-MM-DD
                let dateDebut = new Date(data.date_debut);
                let dateFin = new Date(data.date_fin);

                // Si les dates sont valides, mettre à jour les champs de date
                if (!isNaN(dateDebut.getTime())) {
                    document.getElementById('editDate_debut').value = dateDebut.toISOString().split('T')[0]; // YYYY-MM-DD
                }

                if (!isNaN(dateFin.getTime())) {
                    document.getElementById('editDate_fin').value = dateFin.toISOString().split('T')[0]; // YYYY-MM-DD
                }
        $('#editProjet').modal('show');
    })
    .catch(error => {
        console.error('Erreur lors de la récupération du projet:', error);
        alert("Erreur lors de la récupération du projet : " + error.message);
    });

    });
});

// Soumettre les modifications du projet
document.getElementById('editProjectForm').addEventListener('submit', async (e) => {
    e.preventDefault();

    // Récupérer les données du formulaire
    const formData = new FormData(e.target);
    const data = {
        id: formData.get('id'),
        nom: formData.get('nom'),
        description: formData.get('description'),
        date_debut: formData.get('date_debut'),
        date_fin: formData.get('date_fin')
    };

    try {
        // Envoyer les modifications à l'API
  const response = await fetch(`/api/projets/${data.id}`, {
    method: 'PUT',
    headers: { 'Content-Type': 'application/json' },
    body: JSON.stringify(data),
});

        if (response.ok) {
            alert("Le projet a été modifié avec succès !");
            window.location.reload(); // Rafraîchir la page pour refléter les modifications
        } else {
            const error = await response.text();
            alert('Erreur: ' + error);
        }
    } catch (error) {
        console.error('Erreur lors de la modification du projet:', error);
        alert('Une erreur s\'est produite lors de la modification du projet.');
        console.log('Données envoyées :', data);

    }
});












































document.addEventListener('DOMContentLoaded', () => {
    const deleteButtons = document.querySelectorAll(".btnDeleteProject");

    deleteButtons.forEach(button => {
        button.addEventListener("click", async function () {
            const projectId = this.dataset.id;
            const projectName = this.dataset.nom;

            const confirmDelete = confirm(`Êtes-vous sûr de vouloir supprimer le projet "${projectName}" ?`);
            if (!confirmDelete) return;

            try {
                const response = await fetch(`/api/projets/${projectId}`, {
                    method: 'DELETE'
                });

                if (response.ok) {
                    alert(`Le projet "${projectName}" a été supprimé avec succès.`);
                    location.reload();
                } else {
                    const error = await response.json();
                    alert(`Erreur: ${error.error}`);
                }
            } catch (error) {
                alert('Erreur de connexion au serveur. Veuillez réessayer.');
                console.error('Erreur lors de la suppression :', error);
            }
        });
    });
});


 






document.getElementById('projectForm').addEventListener('submit', async (e) => {
            e.preventDefault();

            const formData = new FormData(e.target);
            const data = {
                nom: formData.get('nom'),
                description: formData.get('description'),
                date_debut: formData.get('date_debut'),
                date_fin: formData.get('date_fin')
            };

            try {
                const response = await fetch('/api/projets/projet', {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify(data)
                });

                if (response.ok) {
                    window.location.reload();  // Rafraîchit la page pour afficher le projet créé
                } else {
                    const error = await response.text();
                    alert('Erreur: ' + error);
                }
            } catch (error) {
                console.error('Erreur lors de la création du projet:', error);
                alert('Erreur lors de la création du projet');
            }
        });










// Fonction pour afficher le modal d'ajout de membre
{# document.querySelectorAll(".btnAjouterMembre").forEach(button => {
    button.addEventListener("click", function () {
        // Récupérer l'id du projet à partir de l'attribut data-projet-id
        var projetId = this.getAttribute("data-projet-id");

        // Ajouter l'id du projet dans le formulaire ou dans une zone cachée
        document.getElementById("ajouterMembreForm").setAttribute("data-projet-id", projetId);

        // Afficher le modal (optionnel car déjà géré par Bootstrap avec data-toggle)
        $('#ajouterMembreModal').modal('show');
    });
});

// Gérer la soumission du formulaire d'ajout de membre
document.getElementById("ajouterMembreForm").addEventListener("submit", function (event) {
    event.preventDefault();

    // Récupérer les informations du formulaire
    var emailMembre = document.getElementById("memberEmail").value;
    var projetId = this.getAttribute("data-projet-id");

    // Envoi des données avec fetch
    fetch(`/api/projets/${projetId}/membre`, {
        method: 'POST',
        headers: {
            'Content-Type': 'application/json',
        },
        body: JSON.stringify({
            email: emailMembre
        })
    })
        .then(response => {
            if (response.ok) {
                alert("Invitation envoyée avec succès !");
                $('#ajouterMembreModal').modal('hide');  // Fermer le modal après succès
            } else {
                return response.text().then(text => alert(text));
            }
        })
        .catch(error => {
            console.error('Erreur:', error);
            alert("Une erreur s'est produite.");
        });
}); #}

// Fonction pour afficher le modal d'ajout de membre
document.querySelectorAll("#btnAjouterMembre").forEach(button => {
    button.addEventListener("click", function () {
        // Récupérer l'id du projet depuis l'attribut data-projet-id
        const projetId = this.getAttribute("data-projet-id");

        if (!projetId) {
            alert("Erreur : ID du projet introuvable !");
            return;
        }

        // Insérer l'id du projet dans le champ caché du formulaire
        document.getElementById("hiddenProjetId").value = projetId;

        // Créer une instance du modal Bootstrap 4
        $('#ajouterMembreModal').modal('show');  // Afficher le modal
    });
});

// Gérer la soumission du formulaire d'ajout de membre
document.getElementById("ajouterMembreForm").addEventListener("submit", async function (event) {
    event.preventDefault();

    // Récupérer les informations du formulaire
    const emailMembre = document.getElementById("memberEmail").value;
    const projetId = document.getElementById("hiddenProjetId").value;

    // Vérification des champs requis
    if (!emailMembre || !projetId) {
        alert("Veuillez remplir tous les champs.");
        return;
    }

    try {
        // Envoi des données avec fetch
        const response = await fetch(`/api/projets/${projetId}/membre`, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                email: emailMembre,
            }),
        });

        // Gestion des réponses
        if (response.ok) {
            alert("Invitation envoyée avec succès !");
            $('#ajouterMembreModal').modal('hide');  // Fermer le modal après succès
            document.getElementById("ajouterMembreForm").reset(); // Réinitialiser le formulaire
        } else {
            const errorMessage = await response.text();
            alert(`Erreur : ${errorMessage}`);
        }
    } catch (error) {
        console.error('Erreur:', error);
        alert("Une erreur s'est produite. Veuillez réessayer.");
    }
});
</script>


    </script>

</body>

</html>
